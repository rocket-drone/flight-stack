lib = 
	is_upstream_set()
	{
		git -C $MR_REPO remote | grep -q upstream
	}
	is_repo_clean()
	{
		test -z "$(git status -s)"
		return $?
	}
	add_upstream_remote()
	{
		local super_path=$(dirname $MR_CONFIG)
		local relative_repo_path=${MR_REPO##$super_path/}
		local upstream_path=$super_path/.mrextras/$relative_repo_path/upstream
		if [ -e $upstream_path ]; then
			local upstream_url=$(cat $upstream_path)
			if [ -n $upstream_url ]; then
				git -C $MR_REPO remote add upstream $upstream_url
			fi
		fi		
	}
	sync_fork()	
	{
		local branch=$(git rev-parse --abbrev-ref HEAD)
		local stashed_changes=0
		if ! is_upstream_set; then
			return
		fi
		if ! is_repo_clean; then
			git stash --all "sync-fork"
			stashed_changes=1
		fi
		if [ "$branch" != "master" ]; then
			git checkout master
		fi
		git fetch upstream
		git merge upstream/master
		git push
		if [ "$branch" != "master" ]; then
			git checkout $branch
		fi
		if [ $stashed_changes -eq 1 ]; then
			git stash pop
		fi
	}
	mark_branch()
	{
		local branch=$(git rev-parse --abbrev-ref HEAD)
		local super_path=$(dirname $MR_CONFIG)
		local relative_repo_path=${MR_REPO##$super_path/}
		local branch_path=$super_path/.mrextras/$relative_repo_path/branch
		echo "marking $MR_REPO with branch $branch"
		echo $branch > $branch_path
		git -C $super_path add $branch_path
	}

git_sync = sync_fork
git_mark = mark_branch
git_branch = git branch "$@"
git_tag = git tag "$@"
git_remote = git remote "$@"
git_switch = git checkout "$@"
git_rebase = git rebase "$@"
git_merge = git merge "$@"
